- name: Do recon on our python interpreter
  ansible.builtin.command:
    cmd:  "/usr/local/bin/python{{ python_version.split('.')[:2] | join('.') }} -c 'import platform; print(platform.python_version())'"
  register:       installed_python_version
  ignore_errors:  true
  # This won't work the first time and that's ok

# Tasks in this block aren't idempotent but the block itself is if successful
- name: Grab, build, and install python
  when: >
    installed_python_version is undefined or
    installed_python_version.stdout != python_version
  block:
    - name: Download and untar source
      ansible.builtin.unarchive:
        src: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tgz"
        dest:       "/tmp/"
        creates:    "/tmp/Python-{{ python_version }}"
        remote_src: true
      # TODO Check against known good sigs/sha/etc
      # Package manager would do this part for us

    - name: Hack configure script before build
      ansible.builtin.replace:
        path:     "/tmp/Python-{{ python_version }}/configure"
        regexp:   'PKG_CONFIG openssl '
        replace:  'PKG_CONFIG openssl11 '
      # 0 effect on build success. Yay

    - name: Run configure script
      ansible.builtin.command:
        cmd:    "./configure --enable-optimizations"
        chdir:  "/tmp/Python-{{ python_version }}"

    - name: Make clean in case this is a second run after failure
      ansible.builtin.command:
        cmd:    "make clean"
        chdir:  "/tmp/Python-{{ python_version }}"

    - name: Compile it
      ansible.builtin.command:
        cmd:    "make"
        chdir:  "/tmp/Python-{{ python_version }}"

    - name: Install it
      become: true
      ansible.builtin.command:
        cmd:    "make install"
        chdir:  "/tmp/Python-{{ python_version }}"
      # Not sure what the deal is with altinstall but we don't here
